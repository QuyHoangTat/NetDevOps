name: Deploy to Staging

on:
  push:
    branches:
      - staging

env:
  PROMETHEUS_TAG: "staging"          # Tag Docker cho Prometheus trong staging
  SNMP_EXPORTER_TAG: "staging"       # Tag Docker cho SNMP Exporter trong staging
  ALERT_MANAGER_TAG: "staging"       # Tag Docker cho Alert Manager trong staging
  GRAFANA_TAG: "staging"             # Tag Docker cho Grafana trong staging
  ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
  ANSIBLE_PASSWORD: ${{ secrets.ANSIBLE_PASSWORD }}
  GF_SECURITY_ADMIN_USER: ${{ secrets.GF_SECURITY_ADMIN_USER }}
  GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}

permissions:
  contents: read

jobs:
  # Job Build Monitor
  build_monitor:
    name: Build Monitor
    runs-on: ubuntu-latest
    environment: staging
    if: contains(github.event.head_commit.message, 'monitor')
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Install Docker
      - name: Install Docker
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
          sudo apt install docker-ce -y
          sudo usermod -aG docker ${USER}

      # Install Trivy
      - name: Install Trivy
        run: |
          sudo apt update
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.1/trivy_0.57.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.1_Linux-64bit.deb
      
      # Build Docker Images
      - name: Build Docker Images
        run: |
          cd Monitoring
          sudo docker compose build

  # Job Test Trivy
  test_trivy:
    name: Test Trivy
    runs-on: ubuntu-latest
    environment: staging
    needs: build_monitor
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Trivy scan
      - name: Trivy scan
        run: |
          sudo docker images -q | xargs -n 1 trivy image

  # Job Monitor
  monitor:
    name: Monitor
    runs-on: ubuntu-latest
    environment: staging
    needs: test_trivy
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Set Grafana secrets in .grafana.secret
      - name: Set Grafana secrets in .grafana.secret
        run: |
          cd Monitoring
          echo "GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}" > .grafana.secret
          echo "GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" >> .grafana.secret

      # Install Monitoring Server
      - name: Install Monitoring Server
        run: |
          cd Monitoring
          sudo docker compose up -d
          sudo docker compose start
          cd snmp-exporter
          sudo docker run --rm -v $(pwd)/mibs:/opt/mibs -v $(pwd)/generator.yml:/opt/generator.yml -v $(pwd):/opt prom/snmp-generator:main generate
          cd ..
          sudo docker compose restart

  # Job Build Network
  build_network:
    name: Build Network
    runs-on: ubuntu-latest
    environment: staging
    if: contains(github.event.head_commit.message, 'network')
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Install Ansible
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      # Install python and modules
      - name: Install Modules
        run: |
          sudo apt install python3 python3-pip -y
          pip3 install paramiko --no-input
          sudo pip3 install ansible-lint
          sudo pip3 install --upgrade ansible
          sudo pip3 install --upgrade ansible-core

  # Job Lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build_network
    environment: staging
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Run ansible-lint
      - name: Run ansible-lint
        run: |
          cd Network
          ansible-lint --fix playbook.yml 

  # Job Test
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    environment: staging
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

  # Job Deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout code from repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Run Ansible Playbook
      - name: Run Ansible Playbook
        run: |
          cd Network
          ansible-playbook -i inventory playbook.yml
